// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  username      String
  avatarUrl     String?  @map("avatar_url")
  statusMessage String?  @map("status_message")
  lastSeen      DateTime @default(now()) @map("last_seen")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  // relations
  createdChat     Chat[]          @relation("ChatCreator")
  chatMembers     ChatMember[]
  sentMessages    Message[]       @relation("MessageSender")
  messageStatuses MessageStatus[]

  @@map("users")
}

model Chat {
  id          String   @id @default(cuid())
  type        ChatType
  name        String?
  description String?
  avatarUrl   String?  @map("avatar_url")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // relations

  creator User         @relation("ChatCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  members ChatMember[]
  messages Message[]

  @@map("chats")
}

model ChatMember {
  chatId   String         @map("chat_id")
  userId   String         @map("user_id")
  role     ChatMemberRole @default(MEMBER)
  joinedAt DateTime       @default(now()) @map("joined_at")

  // relations

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatId, userId])
  @@map("chat_members")
}

model Message {
  id        String      @id @default(cuid())
  chatId    String      @map("chat_id")
  senderId  String      @map("sender_id")
  content   String?
  type      MessageType @default(TEXT)
  fileUrl   String?     @map("file_url")
  fileName  String?     @map("file_name")
  fileSize  Int?        @map("file_size")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")

  // relations
  sender   User            @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  chat     Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  statuses MessageStatus[]

  // indexes for performance
  @@index([chatId, createdAt])
  @@map("messages")
}

model MessageStatus {
  messageId String            @map("message_id")
  userId    String            @map("user_id")
  status    MessageStatusType
  timestamp DateTime          @default(now())

  // relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@map("message_status")
}

// enums
enum ChatType {
  DIRECT
  GROUP

  @@map("chat_type")
}

enum ChatMemberRole {
  ADMIN
  MEMBER

  @@map("chat_member_role")
}

enum MessageType {
  TEXT
  FILE
  IMAGE

  @@map("message_type")
}

enum MessageStatusType {
  SENT
  DELIVERED
  READ
}
